name: Policy Tuning Cadence

on:
  workflow_dispatch:
    inputs:
      cadence:
        description: 'Cadence bucket to run (daily|nightly|weekly)'
        required: false
        default: daily
  schedule:
    - cron: '0 8 * * 1-5'   # DAILY calibrations at 15:00 ICT
    - cron: '0 15 * * 1-5'  # NIGHTLY micro-tune window at 22:00 ICT
    - cron: '0 3 * * 1'     # WEEKLY structural tune every Monday 10:00 ICT

env:
  PYTHON_VERSION: '3.11'
  TUNE_SCHEDULE_ENABLED: 'true'

jobs:
  tuning:
    name: Run cadence-specific tuning pipeline
    runs-on: ubuntu-latest
    if: ${{ env.TUNE_SCHEDULE_ENABLED == 'true' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine cadence bucket
        id: cadence
        run: |
          event_name="$GITHUB_EVENT_NAME"
          cadence=""
          if [ "$event_name" = "workflow_dispatch" ]; then
            cadence="${{ github.event.inputs.cadence }}"
          elif [ "$event_name" = "schedule" ]; then
            cron=$(jq -r '.schedule // ""' "$GITHUB_EVENT_PATH")
            case "$cron" in
              "0 8 * * 1-5") cadence="daily" ;;
              "0 15 * * 1-5") cadence="nightly" ;;
              "0 3 * * 1") cadence="weekly" ;;
              *)
                echo "Unknown cron expression '$cron' for schedule trigger" >&2
                exit 1
                ;;
            esac
          else
            cadence="daily"
          fi
          if [ -z "$cadence" ]; then
            cadence="daily"
          fi
          echo "cadence=$cadence" >> "$GITHUB_OUTPUT"
          echo "Resolved cadence bucket: $cadence"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare sample inputs
        if: ${{ steps.cadence.outputs.cadence != '' }}
        run: |
          mkdir -p in/portfolio
          cp samples/portfolio.csv in/portfolio/sample_portfolio.csv

      - name: Build latest market snapshot
        run: |
          ./broker.sh orders
        env:
          BROKER_UNI_LIMIT: '0'

      - name: Run daily calibration suite
        if: ${{ steps.cadence.outputs.cadence == 'daily' }}
        run: |
          python -m scripts.engine.calibrate_ttl_minutes --write
          python -m scripts.engine.calibrate_fill_prob --write
          python -m scripts.engine.calibrate_watchlist --write

      - name: Run nightly micro-tuning suite
        if: ${{ steps.cadence.outputs.cadence == 'nightly' }}
        run: |
          python -m scripts.engine.calibrate_near_ceiling --write
          python -m scripts.engine.calibrate_liquidity --write
          python -m scripts.engine.calibrate_dynamic_caps --write

      - name: Run weekly structural tuning suite
        if: ${{ steps.cadence.outputs.cadence == 'weekly' }}
        run: |
          python -m scripts.engine.calibrate_regime --horizon 63 --write
          python -m scripts.engine.calibrate_market_filter --write
          python -m scripts.engine.calibrate_risk_limits --write
          python -m scripts.engine.calibrate_sizing --write
          python -m scripts.engine.calibrate_thresholds --write

      - name: Upload calibration artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: tuning-artifacts-${{ steps.cadence.outputs.cadence }}
          path: |
            out/
            config/policy_overrides.json
            out/orders/policy_overrides.json

      - name: Report disabled schedule guard
        if: ${{ env.TUNE_SCHEDULE_ENABLED != 'true' && github.event_name == 'schedule' }}
        run: |
          echo "Schedule triggers are currently disabled. Set TUNE_SCHEDULE_ENABLED=true to activate automated runs."
