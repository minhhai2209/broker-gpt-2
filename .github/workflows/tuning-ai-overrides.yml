name: Tuning AI Overrides

on:
  workflow_dispatch:
    inputs:
      rounds:
        description: "Number of Codex analysis rounds (1-3)"
        required: false
        default: "1"
      python-version:
        description: "Python version"
        required: false
        default: "3.11"
      node-version:
        description: "Node.js version for Codex CLI"
        required: false
        default: "20"
  schedule:
    # Note: GitHub cron uses UTC. Vietnam (ICT) = UTC+7, no DST.
    # Market open windows (Mon–Fri):
    #   - Morning 09:00–11:30 ICT => 02:00–04:30 UTC
    #   - Afternoon 13:00–15:00 ICT => 06:00–08:00 UTC
    # Run periodically during open windows (every 15 minutes),
    # plus one extra run at 07:00 ICT (00:00 UTC) and 21:00 ICT (14:00 UTC).
    - cron: '0,15,30,45 2-3 * * 1-5'   # 09:00–10:45 ICT
    - cron: '0,15,30 4 * * 1-5'        # 11:00–11:30 ICT
    - cron: '0,15,30,45 6-7 * * 1-5'   # 13:00–14:45 ICT
    - cron: '0 8 * * 1-5'              # 15:00 ICT (close)
    - cron: '0 0 * * 1-5'              # 07:00 ICT
    - cron: '0 14 * * 1-5'             # 21:00 ICT

concurrency:
  group: tuning-ai-overrides-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  generate:
    name: Generate and persist policy_overrides.json via Codex CLI
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      BROKER_CX_GEN_ROUNDS: ${{ github.event.inputs.rounds || '1' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ github.event.inputs.python-version || '3.11' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.11' }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Node ${{ github.event.inputs.node-version || '20' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ github.event.inputs.node-version || '20' }}

      - name: Install Codex CLI
        run: |
          set -euo pipefail
          npm install -g @openai/codex@latest
          codex --version

      - name: Configure Codex auth from secret
        env:
          CODEX_AUTH_JSON: ${{ secrets.CODEX_AUTH_JSON }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.codex"
          if [ -z "${CODEX_AUTH_JSON:-}" ]; then
            echo "::error::Missing secret CODEX_AUTH_JSON"; exit 1; fi
          printf '%s' "$CODEX_AUTH_JSON" > "$HOME/.codex/auth.json"
          chmod 600 "$HOME/.codex/auth.json"

      - name: Install Codex config from repo
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.codex"
          test -f .codex/config.toml || { echo '::error::.codex/config.toml not found in repo; aborting per fail-fast policy'; exit 2; }
          cp -f .codex/config.toml "$HOME/.codex/config.toml"
          chmod 600 "$HOME/.codex/config.toml"

      - name: Generate policy_overrides via Codex
        run: |
          set -euo pipefail
          echo "Running rounds=$BROKER_CX_GEN_ROUNDS"
          python -m scripts.ai.generate_policy_overrides

      - name: Persist generated overrides (commit and push)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          test -f config/policy_overrides.json || { echo '::error::generated config/policy_overrides.json missing'; exit 2; }
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Ensure we are up-to-date before committing/pushing
          git fetch origin "$BRANCH_NAME"
          git rebase "origin/$BRANCH_NAME" || { echo 'Rebase failed, attempting to continue per fail-fast policy'; }
          git add config/policy_overrides.json
          git commit -m "chore(policy): update policy_overrides via tuning-ai" || echo "No changes to commit"
          # Push with small retry window in case of concurrent updates
          for i in 1 2 3; do
            if git push origin "$BRANCH_NAME"; then exit 0; fi
            echo "Push failed, retry $i/3 after rebase"
            git fetch origin "$BRANCH_NAME"
            git rebase "origin/$BRANCH_NAME" || true
            sleep 2
          done
          echo "::error::Failed to push after retries"; exit 1

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: policy-overrides-generated
          path: |
            config/policy_overrides.json
            out/debug/**
