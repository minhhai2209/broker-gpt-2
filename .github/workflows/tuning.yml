name: Unified Tuning (AI + Calibrations)

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: "Python version"
        required: false
        default: "3.11"
      node-version:
        description: "Node.js version for Codex CLI"
        required: false
        default: "20"
  schedule:
    # GitHub cron uses UTC. Vietnam (ICT) = UTC+7.
    - cron: '0 */2 * * *'
  push:
    # Run when code changes land, but avoid infinite loops on overlay commits
    paths-ignore:
      - 'config/policy_overrides.json'
  workflow_call:
    inputs:
      python-version:
        description: "Python version"
        required: false
        type: string
        default: "3.11"
      node-version:
        description: "Node.js version for Codex CLI"
        required: false
        type: string
        default: "20"
    secrets:
      CODEX_AUTH_JSON:
        required: true

concurrency:
  group: tuning-unified-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  tune:
    name: Run unified tune and persist overlay
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version || '3.11' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version || '3.11' }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install Python dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Node ${{ inputs.node-version || '20' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version || '20' }}

      - name: Install Codex CLI
        run: |
          set -euo pipefail
          npm install -g @openai/codex@latest
          codex --version

      - name: Configure Codex auth from secret
        env:
          CODEX_AUTH_JSON: ${{ secrets.CODEX_AUTH_JSON }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.codex"
          if [ -z "${CODEX_AUTH_JSON:-}" ]; then
            echo "::error::Missing secret CODEX_AUTH_JSON"; exit 1; fi
          printf '%s' "$CODEX_AUTH_JSON" > "$HOME/.codex/auth.json"
          chmod 600 "$HOME/.codex/auth.json"

      - name: Install Codex config from repo
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.codex"
          test -f .codex/config.toml || { echo '::error::.codex/config.toml not found in repo; aborting per fail-fast policy'; exit 2; }
          cp -f .codex/config.toml "$HOME/.codex/config.toml"
          chmod 600 "$HOME/.codex/config.toml"

      - name: Prepare sample inputs (portfolio)
        run: |
          set -euo pipefail
          mkdir -p in/portfolio
          # If the portfolio folder is empty (no CSV), copy sample if available
          if [ -z "$(ls -1 in/portfolio/*.csv 2>/dev/null || true)" ]; then
            if [ -f samples/portfolio.csv ]; then
              cp -f samples/portfolio.csv in/portfolio/sample_portfolio.csv
              echo "seeded in/portfolio/sample_portfolio.csv"
            else
              echo "no samples/portfolio.csv found; proceeding with empty folder"
            fi
          fi

      - name: Run unified tune
        env:
          BROKER_CX_GEN_ROUNDS: "1"
        run: |
          set -euo pipefail
          mkdir -p out
          echo "Running unified tune, rounds=$BROKER_CX_GEN_ROUNDS"
          ./broker.sh tune 2>&1 | tee out/tune_run.log

      - name: Print tune log on failure
        if: ${{ failure() }}
        run: |
          echo "=== tune_run.log (tail) ==="
          tail -n 200 out/tune_run.log || echo "tune_run.log missing"


      - name: Commit and push published overlay (main)
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          test -f config/policy_overrides.json || { echo '::error::config/policy_overrides.json missing after tune'; exit 2; }
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BRANCH_NAME"
          git rebase "origin/$BRANCH_NAME" || { echo 'Rebase failed, trying to continue'; }
          git add config/policy_overrides.json
          git commit -m "chore(policy): update unified policy_overrides via tuning" || echo "No changes to commit"
          for i in 1 2 3; do
            if git push origin "$BRANCH_NAME"; then exit 0; fi
            echo "Push failed, retry $i/3 after rebase"
            git fetch origin "$BRANCH_NAME"
            git rebase "origin/$BRANCH_NAME" || true
            sleep 2
          done
          echo "::error::Failed to push after retries"; exit 1

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: tuning-artifacts-unified
          path: |
            out/
            config/policy_overrides.json
            out/orders/policy_overrides.json
